{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils';\n// For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n *\n * This file previously used a regular expression to find html tags in the input\n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n * with certain input text, causing Autolinker to either hang or just take a\n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n *\n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n *\n * The other intention behind this is that we didn't want to add external\n * dependencies on the Autolinker utility which would increase its size. For\n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It\n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n *\n * Reference for HTML spec:\n *\n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first\n *   argument, and offset (number) into the string as its second.\n */\nexport function parseHtml(html, _a) {\n  var onOpenTag = _a.onOpenTag,\n    onCloseTag = _a.onCloseTag,\n    onText = _a.onText,\n    onComment = _a.onComment,\n    onDoctype = _a.onDoctype;\n  var noCurrentTag = new CurrentTag();\n  var charIdx = 0,\n    len = html.length,\n    state = 0 /* Data */,\n    currentDataIdx = 0,\n    // where the current data start index is\n    currentTag = noCurrentTag; // describes the current tag that is being read\n  // For debugging: search for other \"For debugging\" lines\n  // const table = new CliTable( {\n  // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n  // } );\n  while (charIdx < len) {\n    var char = html.charAt(charIdx);\n    // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push(\n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n    // );\n    switch (state) {\n      case 0 /* Data */:\n        stateData(char);\n        break;\n      case 1 /* TagOpen */:\n        stateTagOpen(char);\n        break;\n      case 2 /* EndTagOpen */:\n        stateEndTagOpen(char);\n        break;\n      case 3 /* TagName */:\n        stateTagName(char);\n        break;\n      case 4 /* BeforeAttributeName */:\n        stateBeforeAttributeName(char);\n        break;\n      case 5 /* AttributeName */:\n        stateAttributeName(char);\n        break;\n      case 6 /* AfterAttributeName */:\n        stateAfterAttributeName(char);\n        break;\n      case 7 /* BeforeAttributeValue */:\n        stateBeforeAttributeValue(char);\n        break;\n      case 8 /* AttributeValueDoubleQuoted */:\n        stateAttributeValueDoubleQuoted(char);\n        break;\n      case 9 /* AttributeValueSingleQuoted */:\n        stateAttributeValueSingleQuoted(char);\n        break;\n      case 10 /* AttributeValueUnquoted */:\n        stateAttributeValueUnquoted(char);\n        break;\n      case 11 /* AfterAttributeValueQuoted */:\n        stateAfterAttributeValueQuoted(char);\n        break;\n      case 12 /* SelfClosingStartTag */:\n        stateSelfClosingStartTag(char);\n        break;\n      case 13 /* MarkupDeclarationOpenState */:\n        stateMarkupDeclarationOpen(char);\n        break;\n      case 14 /* CommentStart */:\n        stateCommentStart(char);\n        break;\n      case 15 /* CommentStartDash */:\n        stateCommentStartDash(char);\n        break;\n      case 16 /* Comment */:\n        stateComment(char);\n        break;\n      case 17 /* CommentEndDash */:\n        stateCommentEndDash(char);\n        break;\n      case 18 /* CommentEnd */:\n        stateCommentEnd(char);\n        break;\n      case 19 /* CommentEndBang */:\n        stateCommentEndBang(char);\n        break;\n      case 20 /* Doctype */:\n        stateDoctype(char);\n        break;\n      default:\n        throwUnhandledCaseError(state);\n    }\n    // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push(\n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n    // );\n    charIdx++;\n  }\n  if (currentDataIdx < charIdx) {\n    emitText();\n  }\n  // For debugging: search for other \"For debugging\" lines\n  // console.log( '\\n' + table.toString() );\n  // Called when non-tags are being read (i.e. the text around HTML â€ ags)\n  // https://www.w3.org/TR/html51/syntax.html#data-state\n  function stateData(char) {\n    if (char === '<') {\n      startNewTag();\n    }\n  }\n  // Called after a '<' is read from the Data state\n  // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n  function stateTagOpen(char) {\n    if (char === '!') {\n      state = 13 /* MarkupDeclarationOpenState */;\n    } else if (char === '/') {\n      state = 2 /* EndTagOpen */;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (letterRe.test(char)) {\n      // tag name start (and no '/' read)\n      state = 3 /* TagName */;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isOpening: true\n      }));\n    } else {\n      // Any other\n      state = 0 /* Data */;\n      currentTag = noCurrentTag;\n    }\n  }\n  // After a '<x', '</x' sequence is read (where 'x' is a letter character),\n  // this is to continue reading the tag name\n  // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n  function stateTagName(char) {\n    if (whitespaceRe.test(char)) {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === '/') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n      // Anything else that does not form an html tag. Note: the colon\n      // character is accepted for XML namespaced tags\n      resetToDataState();\n    } else {\n      // continue reading tag name\n    }\n  }\n  // Called after the '/' is read from a '</' sequence\n  // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n  function stateEndTagOpen(char) {\n    if (char === '>') {\n      // parse error. Encountered \"</>\". Skip it without treating as a tag\n      resetToDataState();\n    } else if (letterRe.test(char)) {\n      state = 3 /* TagName */;\n    } else {\n      // some other non-tag-like character, don't treat this as a tag\n      resetToDataState();\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n  function stateBeforeAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      // stay in BeforeAttributeName state - continue reading chars\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other char, start of a new attribute name\n      state = 5 /* AttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n  function stateAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      state = 6 /* AfterAttributeName */;\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '=') {\n      state = 7 /* BeforeAttributeValue */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // anything else: continue reading attribute name\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n  function stateAfterAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      // ignore the character - continue reading\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '=') {\n      state = 7 /* BeforeAttributeValue */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other character, start a new attribute in the current tag\n      state = 5 /* AttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n  function stateBeforeAttributeValue(char) {\n    if (whitespaceRe.test(char)) {\n      // ignore the character - continue reading\n    } else if (char === \"\\\"\") {\n      state = 8 /* AttributeValueDoubleQuoted */;\n    } else if (char === \"'\") {\n      state = 9 /* AttributeValueSingleQuoted */;\n    } else if (/[>=`]/.test(char)) {\n      // Invalid chars after an '=' for an attribute value, don't count\n      // the current tag as an HTML tag\n      resetToDataState();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, consider it an unquoted attribute value\n      state = 10 /* AttributeValueUnquoted */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n  function stateAttributeValueDoubleQuoted(char) {\n    if (char === \"\\\"\") {\n      // end the current double-quoted attribute\n      state = 11 /* AfterAttributeValueQuoted */;\n    } else {\n      // consume the character as part of the double-quoted attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n  function stateAttributeValueSingleQuoted(char) {\n    if (char === \"'\") {\n      // end the current single-quoted attribute\n      state = 11 /* AfterAttributeValueQuoted */;\n    } else {\n      // consume the character as part of the double-quoted attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n  function stateAttributeValueUnquoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, treat it as part of the attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n  function stateAfterAttributeValueQuoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, \"parse error\". Spec says to switch to the\n      // BeforeAttributeState and re-consume the character, as it may be\n      // the start of a new attribute name\n      state = 4 /* BeforeAttributeName */;\n      reconsumeCurrentCharacter();\n    }\n  }\n  // A '/' has just been read in the current tag (presumably for '/>'), and\n  // this handles the next character\n  // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n  function stateSelfClosingStartTag(char) {\n    if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else {\n      state = 4 /* BeforeAttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n  // (HTML Comments or !DOCTYPE)\n  function stateMarkupDeclarationOpen(char) {\n    if (html.substr(charIdx, 2) === '--') {\n      // html comment\n      charIdx += 2; // \"consume\" characters\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'comment'\n      }));\n      state = 14 /* CommentStart */;\n    } else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n      charIdx += 7; // \"consume\" characters\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'doctype'\n      }));\n      state = 20 /* Doctype */;\n    } else {\n      // At this point, the spec specifies that the state machine should\n      // enter the \"bogus comment\" state, in which case any character(s)\n      // after the '<!' that were read should become an HTML comment up\n      // until the first '>' that is read (or EOF). Instead, we'll assume\n      // that a user just typed '<!' as part of text data\n      resetToDataState();\n    }\n  }\n  // Handles after the sequence '<!--' has been read\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n  function stateCommentStart(char) {\n    if (char === '-') {\n      // We've read the sequence '<!---' at this point (3 dashes)\n      state = 15 /* CommentStartDash */;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence\n      // '<!-->'\n      resetToDataState();\n    } else {\n      // Any other char, take it as part of the comment\n      state = 16 /* Comment */;\n    }\n  }\n  // We've read the sequence '<!---' at this point (3 dashes)\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n  function stateCommentStartDash(char) {\n    if (char === '-') {\n      // We've read '<!----' (4 dashes) at this point\n      state = 18 /* CommentEnd */;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence\n      // '<!--->'\n      resetToDataState();\n    } else {\n      // Anything else, take it as a valid comment\n      state = 16 /* Comment */;\n    }\n  }\n  // Currently reading the comment's text (data)\n  // https://www.w3.org/TR/html51/syntax.html#comment-state\n  function stateComment(char) {\n    if (char === '-') {\n      state = 17 /* CommentEndDash */;\n    } else {\n      // Any other character, stay in the Comment state\n    }\n  }\n  // When we we've read the first dash inside a comment, it may signal the\n  // end of the comment if we read another dash\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n  function stateCommentEndDash(char) {\n    if (char === '-') {\n      state = 18 /* CommentEnd */;\n    } else {\n      // Wasn't a dash, must still be part of the comment\n      state = 16 /* Comment */;\n    }\n  }\n  // After we've read two dashes inside a comment, it may signal the end of\n  // the comment if we then read a '>' char\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n  function stateCommentEnd(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '!') {\n      state = 19 /* CommentEndBang */;\n    } else if (char === '-') {\n      // A 3rd '-' has been read: stay in the CommentEnd state\n    } else {\n      // Anything else, switch back to the comment state since we didn't\n      // read the full \"end comment\" sequence (i.e. '-->')\n      state = 16 /* Comment */;\n    }\n  }\n  // We've read the sequence '--!' inside of a comment\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n  function stateCommentEndBang(char) {\n    if (char === '-') {\n      // We read the sequence '--!-' inside of a comment. The last dash\n      // could signify that the comment is going to close\n      state = 17 /* CommentEndDash */;\n    } else if (char === '>') {\n      // End of comment with the sequence '--!>'\n      emitTagAndPreviousTextNode();\n    } else {\n      // The '--!' was not followed by a '>', continue reading the\n      // comment's text\n      state = 16 /* Comment */;\n    }\n  }\n  /**\n   * For DOCTYPES in particular, we don't care about the attributes. Just\n   * advance to the '>' character and emit the tag, unless we find a '<'\n   * character in which case we'll start a new tag.\n   *\n   * Example doctype tag:\n   *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n   *\n   * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n   */\n  function stateDoctype(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      startNewTag();\n    } else {\n      // stay in the Doctype state\n    }\n  }\n  /**\n   * Resets the state back to the Data state, and removes the current tag.\n   *\n   * We'll generally run this function whenever a \"parse error\" is\n   * encountered, where the current tag that is being read no longer looks\n   * like a real HTML tag.\n   */\n  function resetToDataState() {\n    state = 0 /* Data */;\n    currentTag = noCurrentTag;\n  }\n  /**\n   * Starts a new HTML tag at the current index, ignoring any previous HTML\n   * tag that was being read.\n   *\n   * We'll generally run this function whenever we read a new '<' character,\n   * including when we read a '<' character inside of an HTML tag that we were\n   * previously reading.\n   */\n  function startNewTag() {\n    state = 1 /* TagOpen */;\n    currentTag = new CurrentTag({\n      idx: charIdx\n    });\n  }\n  /**\n   * Once we've decided to emit an open tag, that means we can also emit the\n   * text node before it.\n   */\n  function emitTagAndPreviousTextNode() {\n    var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n    if (textBeforeTag) {\n      // the html tag was the first element in the html string, or two\n      // tags next to each other, in which case we should not emit a text\n      // node\n      onText(textBeforeTag, currentDataIdx);\n    }\n    if (currentTag.type === 'comment') {\n      onComment(currentTag.idx);\n    } else if (currentTag.type === 'doctype') {\n      onDoctype(currentTag.idx);\n    } else {\n      if (currentTag.isOpening) {\n        onOpenTag(currentTag.name, currentTag.idx);\n      }\n      if (currentTag.isClosing) {\n        // note: self-closing tags will emit both opening and closing\n        onCloseTag(currentTag.name, currentTag.idx);\n      }\n    }\n    // Since we just emitted a tag, reset to the data state for the next char\n    resetToDataState();\n    currentDataIdx = charIdx + 1;\n  }\n  function emitText() {\n    var text = html.slice(currentDataIdx, charIdx);\n    onText(text, currentDataIdx);\n    currentDataIdx = charIdx + 1;\n  }\n  /**\n   * Captures the tag name from the start of the tag to the current character\n   * index, and converts it to lower case\n   */\n  function captureTagName() {\n    var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n    return html.slice(startIdx, charIdx).toLowerCase();\n  }\n  /**\n   * Causes the main loop to re-consume the current character, such as after\n   * encountering a \"parse error\" that changed state and needs to reconsume\n   * the same character in that new state.\n   */\n  function reconsumeCurrentCharacter() {\n    charIdx--;\n  }\n}\nvar CurrentTag = /** @class */function () {\n  function CurrentTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n    this.type = cfg.type || 'tag';\n    this.name = cfg.name || '';\n    this.isOpening = !!cfg.isOpening;\n    this.isClosing = !!cfg.isClosing;\n  }\n  return CurrentTag;\n}();","map":{"version":3,"mappings":"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","names":["letterRe","digitRe","whitespaceRe","quoteRe","controlCharsRe","throwUnhandledCaseError","parseHtml","html","_a","onOpenTag","onCloseTag","onText","onComment","onDoctype","noCurrentTag","CurrentTag","charIdx","len","length","state","currentDataIdx","currentTag","char","charAt","stateData","stateTagOpen","stateEndTagOpen","stateTagName","stateBeforeAttributeName","stateAttributeName","stateAfterAttributeName","stateBeforeAttributeValue","stateAttributeValueDoubleQuoted","stateAttributeValueSingleQuoted","stateAttributeValueUnquoted","stateAfterAttributeValueQuoted","stateSelfClosingStartTag","stateMarkupDeclarationOpen","stateCommentStart","stateCommentStartDash","stateComment","stateCommentEndDash","stateCommentEnd","stateCommentEndBang","stateDoctype","emitText","startNewTag","isClosing","test","isOpening","name","captureTagName","emitTagAndPreviousTextNode","resetToDataState","reconsumeCurrentCharacter","substr","type","toUpperCase","idx","textBeforeTag","slice","text","startIdx","toLowerCase","cfg","undefined"],"sources":["../../../src/htmlParser/parse-html.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}