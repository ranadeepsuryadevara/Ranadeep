{"ast":null,"code":"import { version } from './version';\nimport { defaults, remove, splitAndCapture } from './utils';\nimport { AnchorTagBuilder } from './anchor-tag-builder';\nimport { Match } from './match/match';\nimport { EmailMatch } from './match/email-match';\nimport { HashtagMatch } from './match/hashtag-match';\nimport { MentionMatch } from './match/mention-match';\nimport { PhoneMatch } from './match/phone-match';\nimport { UrlMatch } from './match/url-match';\nimport { Matcher } from './matcher/matcher';\nimport { HtmlTag } from './html-tag';\nimport { EmailMatcher } from './matcher/email-matcher';\nimport { UrlMatcher } from './matcher/url-matcher';\nimport { HashtagMatcher, hashtagServices } from './matcher/hashtag-matcher';\nimport { PhoneMatcher } from './matcher/phone-matcher';\nimport { MentionMatcher } from './matcher/mention-matcher';\nimport { parseHtml } from './htmlParser/parse-html';\n/**\n * @class Autolinker\n * @extends Object\n *\n * Utility class used to process a given string of text, and wrap the matches in\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n *\n * Any of the configuration options may be provided in an Object provided\n * to the Autolinker constructor, which will configure how the {@link #link link()}\n * method will process the links.\n *\n * For example:\n *\n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * The {@link #static-link static link()} method may also be used to inline\n * options into a single call, which may be more convenient for one-off uses.\n * For example:\n *\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * ## Custom Replacements of Links\n *\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n * may be provided to fully customize the output of Autolinker. This function is\n * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n * match that is encountered.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *\n *                         return tag;\n *\n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *\n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *\n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *\n *                 case 'phone' :\n *                     var phoneNumber = match.getPhoneNumber();\n *                     console.log( phoneNumber );\n *\n *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n *\n *                 case 'hashtag' :\n *                     var hashtag = match.getHashtag();\n *                     console.log( hashtag );\n *\n *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n *\n *                 case 'mention' :\n *                     var mention = match.getMention();\n *                     console.log( mention );\n *\n *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n *             }\n *         }\n *     } );\n *\n *\n * The function may return the following values:\n *\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n *   would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be\n *   used directly as the replacement HTML for the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n *   an HTML tag before writing out its HTML text.\n */\nvar Autolinker = /** @class */function () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration options for the Autolinker instance,\n   *   specified in an Object (map).\n   */\n  function Autolinker(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * The Autolinker version number exposed on the instance itself.\n     *\n     * Ex: 0.25.1\n     */\n    this.version = Autolinker.version;\n    /**\n     * @cfg {Boolean/Object} [urls]\n     *\n     * `true` if URLs should be automatically linked, `false` if they should not\n     * be. Defaults to `true`.\n     *\n     * Examples:\n     *\n     *     urls: true\n     *\n     *     // or\n     *\n     *     urls: {\n     *         schemeMatches : true,\n     *         wwwMatches    : true,\n     *         tldMatches    : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 3 properties\n     * to allow for more customization of what exactly gets linked. All default\n     * to `true`:\n     *\n     * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n     *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n     *   `false` to prevent these types of matches.\n     * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n     *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n     *   matches. Note that if the URL had a prefixed scheme, and\n     *   `schemeMatches` is true, it will still be linked.\n     * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n     *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n     *   `'www.'`. This option attempts to match anything that looks like a URL\n     *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n     *   to prevent these types of matches.\n     */\n    this.urls = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [email=true]\n     *\n     * `true` if email addresses should be automatically linked, `false` if they\n     * should not be.\n     */\n    this.email = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [phone=true]\n     *\n     * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n     * `false` if they should not be.\n     */\n    this.phone = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean/String} [hashtag=false]\n     *\n     * A string for the service name to have hashtags (ex: \"#myHashtag\")\n     * auto-linked to. The currently-supported values are:\n     *\n     * - 'twitter'\n     * - 'facebook'\n     * - 'instagram'\n     *\n     * Pass `false` to skip auto-linking of hashtags.\n     */\n    this.hashtag = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String/Boolean} [mention=false]\n     *\n     * A string for the service name to have mentions (ex: \"@myuser\")\n     * auto-linked to. The currently supported values are:\n     *\n     * - 'twitter'\n     * - 'instagram'\n     * - 'soundcloud'\n     *\n     * Defaults to `false` to skip auto-linking of mentions.\n     */\n    this.mention = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [newWindow=true]\n     *\n     * `true` if the links should open in a new window, `false` otherwise.\n     */\n    this.newWindow = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean/Object} [stripPrefix=true]\n     *\n     * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n     * from the beginning of URL links' text, `false` otherwise. Defaults to\n     * `true`.\n     *\n     * Examples:\n     *\n     *     stripPrefix: true\n     *\n     *     // or\n     *\n     *     stripPrefix: {\n     *         scheme : true,\n     *         www    : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 2 properties\n     * to allow for more customization of what exactly is prevented from being\n     * displayed. Both default to `true`:\n     *\n     * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n     *   a URL match from being displayed to the user. Example:\n     *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n     *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n     *   will be removed, so as not to remove a potentially dangerous scheme\n     *   (such as `'file://'` or `'javascript:'`)\n     * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n     *   `'www.'` part of a URL match from being displayed to the user. Ex:\n     *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n     *   strip the `'www'`.\n     */\n    this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [stripTrailingSlash=true]\n     *\n     * `true` to remove the trailing slash from URL matches, `false` to keep\n     *  the trailing slash.\n     *\n     *  Example when `true`: `http://google.com/` will be displayed as\n     *  `http://google.com`.\n     */\n    this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [decodePercentEncoding=true]\n     *\n     * `true` to decode percent-encoded characters in URL matches, `false` to keep\n     *  the percent-encoded characters.\n     *\n     *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n     *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n     */\n    this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Number/Object} [truncate=0]\n     *\n     * ## Number Form\n     *\n     * A number for how many characters matched text should be truncated to\n     * inside the text of a link. If the matched text is over this number of\n     * characters, it will be truncated to this length by adding a two period\n     * ellipsis ('..') to the end of the string.\n     *\n     * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n     * truncated to 25 characters might look something like this:\n     * 'yahoo.com/some/long/pat..'\n     *\n     * Example Usage:\n     *\n     *     truncate: 25\n     *\n     *\n     *  Defaults to `0` for \"no truncation.\"\n     *\n     *\n     * ## Object Form\n     *\n     * An Object may also be provided with two properties: `length` (Number) and\n     * `location` (String). `location` may be one of the following: 'end'\n     * (default), 'middle', or 'smart'.\n     *\n     * Example Usage:\n     *\n     *     truncate: { length: 25, location: 'middle' }\n     *\n     * @cfg {Number} [truncate.length=0] How many characters to allow before\n     *   truncation will occur. Defaults to `0` for \"no truncation.\"\n     * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n     *\n     * - 'end' (default): will truncate up to the number of characters, and then\n     *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n     * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n     *   'yahoo.com/s..th/to/a/file'\n     * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n     *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n     *   attempting to make the URL human-readable before looking for a good\n     *   point to insert the ellipsis if it is still too long. Ex:\n     *   'yahoo.com/some..to/a/file'. For more details, see\n     *   {@link Autolinker.truncate.TruncateSmart}.\n     */\n    this.truncate = {\n      length: 0,\n      location: 'end'\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} className\n     *\n     * A CSS class name to add to the generated links. This class will be added\n     * to all links, as well as this class plus match suffixes for styling\n     * url/email/phone/hashtag/mention links differently.\n     *\n     * For example, if this config is provided as \"myLink\", then:\n     *\n     * - URL links will have the CSS classes: \"myLink myLink-url\"\n     * - Email links will have the CSS classes: \"myLink myLink-email\", and\n     * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n     * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n     * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n     *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n     */\n    this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Function} replaceFn\n     *\n     * A function to individually process each match found in the input string.\n     *\n     * See the class's description for usage.\n     *\n     * The `replaceFn` can be called with a different context object (`this`\n     * reference) using the {@link #context} cfg.\n     *\n     * This function is called with the following parameter:\n     *\n     * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n     *   can be used to retrieve information about the match that the `replaceFn`\n     *   is currently processing. See {@link Autolinker.match.Match} subclasses\n     *   for details.\n     */\n    this.replaceFn = null; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Object} context\n     *\n     * The context object (`this` reference) to call the `replaceFn` with.\n     *\n     * Defaults to this Autolinker instance.\n     */\n    this.context = undefined; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} [sanitizeHtml=false]\n     *\n     * `true` to HTML-encode the start and end brackets of existing HTML tags found\n     * in the input string. This will escape `<` and `>` characters to `&lt;` and\n     * `&gt;`, respectively.\n     *\n     * Setting this to `true` will prevent XSS (Cross-site Scripting) attacks,\n     * but will remove the significance of existing HTML tags in the input string. If\n     * you would like to maintain the significance of existing HTML tags while also\n     * making the output HTML string safe, leave this option as `false` and use a\n     * tool like https://github.com/cure53/DOMPurify (or others) on the input string\n     * before running Autolinker.\n     */\n    this.sanitizeHtml = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @private\n     * @property {Autolinker.matcher.Matcher[]} matchers\n     *\n     * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n     * instance.\n     *\n     * This is lazily created in {@link #getMatchers}.\n     */\n    this.matchers = null;\n    /**\n     * @private\n     * @property {Autolinker.AnchorTagBuilder} tagBuilder\n     *\n     * The AnchorTagBuilder instance used to build match replacement anchor tags.\n     * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n     */\n    this.tagBuilder = null;\n    // Note: when `this.something` is used in the rhs of these assignments,\n    //       it refers to the default values set above the constructor\n    this.urls = this.normalizeUrlsCfg(cfg.urls);\n    this.email = typeof cfg.email === 'boolean' ? cfg.email : this.email;\n    this.phone = typeof cfg.phone === 'boolean' ? cfg.phone : this.phone;\n    this.hashtag = cfg.hashtag || this.hashtag;\n    this.mention = cfg.mention || this.mention;\n    this.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : this.newWindow;\n    this.stripPrefix = this.normalizeStripPrefixCfg(cfg.stripPrefix);\n    this.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : this.stripTrailingSlash;\n    this.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : this.decodePercentEncoding;\n    this.sanitizeHtml = cfg.sanitizeHtml || false;\n    // Validate the value of the `mention` cfg\n    var mention = this.mention;\n    if (mention !== false && ['twitter', 'instagram', 'soundcloud', 'tiktok'].indexOf(mention) === -1) {\n      throw new Error(\"invalid `mention` cfg '\".concat(mention, \"' - see docs\"));\n    }\n    // Validate the value of the `hashtag` cfg\n    var hashtag = this.hashtag;\n    if (hashtag !== false && hashtagServices.indexOf(hashtag) === -1) {\n      throw new Error(\"invalid `hashtag` cfg '\".concat(hashtag, \"' - see docs\"));\n    }\n    this.truncate = this.normalizeTruncateCfg(cfg.truncate);\n    this.className = cfg.className || this.className;\n    this.replaceFn = cfg.replaceFn || this.replaceFn;\n    this.context = cfg.context || this;\n  }\n  /**\n   * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n   * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n   * found within HTML tags.\n   *\n   * For instance, if given the text: `You should go to http://www.yahoo.com`,\n   * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   *\n   * Example:\n   *\n   *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n   *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n   *\n   * @static\n   * @param {String} textOrHtml The HTML or text to find matches within (depending\n   *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @param {Object} [options] Any of the configuration options for the Autolinker\n   *   class, specified in an Object (map). See the class description for an\n   *   example call.\n   * @return {String} The HTML text, with matches automatically linked.\n   */\n  Autolinker.link = function (textOrHtml, options) {\n    var autolinker = new Autolinker(options);\n    return autolinker.link(textOrHtml);\n  };\n  /**\n   * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches (without making any replacements).\n   *\n   * Note that if parsing multiple pieces of text, it is slightly more efficient\n   * to create an Autolinker instance, and use the instance-level {@link #parse}\n   * method.\n   *\n   * Example:\n   *\n   *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n   *         urls: true,\n   *         email: true\n   *     } );\n   *\n   *     console.log( matches.length );           // 2\n   *     console.log( matches[ 0 ].getType() );   // 'url'\n   *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n   *     console.log( matches[ 1 ].getType() );   // 'email'\n   *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n   *\n   * @static\n   * @param {String} textOrHtml The HTML or text to find matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @param {Object} [options] Any of the configuration options for the Autolinker\n   *   class, specified in an Object (map). See the class description for an\n   *   example call.\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `textOrHtml`.\n   */\n  Autolinker.parse = function (textOrHtml, options) {\n    var autolinker = new Autolinker(options);\n    return autolinker.parse(textOrHtml);\n  };\n  /**\n   * Normalizes the {@link #urls} config into an Object with 3 properties:\n   * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n   *\n   * See {@link #urls} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} urls\n   * @return {Object}\n   */\n  Autolinker.prototype.normalizeUrlsCfg = function (urls) {\n    if (urls == null) urls = true; // default to `true`\n    if (typeof urls === 'boolean') {\n      return {\n        schemeMatches: urls,\n        wwwMatches: urls,\n        tldMatches: urls\n      };\n    } else {\n      // object form\n      return {\n        schemeMatches: typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n        wwwMatches: typeof urls.wwwMatches === 'boolean' ? urls.wwwMatches : true,\n        tldMatches: typeof urls.tldMatches === 'boolean' ? urls.tldMatches : true\n      };\n    }\n  };\n  /**\n   * Normalizes the {@link #stripPrefix} config into an Object with 2\n   * properties: `scheme`, and `www` - both Booleans.\n   *\n   * See {@link #stripPrefix} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} stripPrefix\n   * @return {Object}\n   */\n  Autolinker.prototype.normalizeStripPrefixCfg = function (stripPrefix) {\n    if (stripPrefix == null) stripPrefix = true; // default to `true`\n    if (typeof stripPrefix === 'boolean') {\n      return {\n        scheme: stripPrefix,\n        www: stripPrefix\n      };\n    } else {\n      // object form\n      return {\n        scheme: typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n        www: typeof stripPrefix.www === 'boolean' ? stripPrefix.www : true\n      };\n    }\n  };\n  /**\n   * Normalizes the {@link #truncate} config into an Object with 2 properties:\n   * `length` (Number), and `location` (String).\n   *\n   * See {@link #truncate} config for details.\n   *\n   * @private\n   * @param {Number/Object} truncate\n   * @return {Object}\n   */\n  Autolinker.prototype.normalizeTruncateCfg = function (truncate) {\n    if (typeof truncate === 'number') {\n      return {\n        length: truncate,\n        location: 'end'\n      };\n    } else {\n      // object, or undefined/null\n      return defaults(truncate || {}, {\n        length: Number.POSITIVE_INFINITY,\n        location: 'end'\n      });\n    }\n  };\n  /**\n   * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches (without making any replacements).\n   *\n   * This method is used by the {@link #link} method, but can also be used to\n   * simply do parsing of the input in order to discover what kinds of links\n   * there are and how many.\n   *\n   * Example usage:\n   *\n   *     var autolinker = new Autolinker( {\n   *         urls: true,\n   *         email: true\n   *     } );\n   *\n   *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n   *\n   *     console.log( matches.length );           // 2\n   *     console.log( matches[ 0 ].getType() );   // 'url'\n   *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n   *     console.log( matches[ 1 ].getType() );   // 'email'\n   *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n   *\n   * @param {String} textOrHtml The HTML or text to find matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `textOrHtml`.\n   */\n  Autolinker.prototype.parse = function (textOrHtml) {\n    var _this = this;\n    var skipTagNames = ['a', 'style', 'script'],\n      skipTagsStackCount = 0,\n      // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n      matches = [];\n    // Find all matches within the `textOrHtml` (but not matches that are\n    // already nested within <a>, <style> and <script> tags)\n    parseHtml(textOrHtml, {\n      onOpenTag: function (tagName) {\n        if (skipTagNames.indexOf(tagName) >= 0) {\n          skipTagsStackCount++;\n        }\n      },\n      onText: function (text, offset) {\n        // Only process text nodes that are not within an <a>, <style> or <script> tag\n        if (skipTagsStackCount === 0) {\n          // \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n          // could be at the end of a URL, but we don't want to\n          // include the trailing '&' in the URL. See issue #76\n          // TODO: Handle HTML entities separately in parseHtml() and\n          // don't emit them as \"text\" except for &amp; entities\n          var htmlCharacterEntitiesRegex = /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi;\n          var textSplit = splitAndCapture(text, htmlCharacterEntitiesRegex);\n          var currentOffset_1 = offset;\n          textSplit.forEach(function (splitText, i) {\n            // even number matches are text, odd numbers are html entities\n            if (i % 2 === 0) {\n              var textNodeMatches = _this.parseText(splitText, currentOffset_1);\n              matches.push.apply(matches, textNodeMatches);\n            }\n            currentOffset_1 += splitText.length;\n          });\n        }\n      },\n      onCloseTag: function (tagName) {\n        if (skipTagNames.indexOf(tagName) >= 0) {\n          skipTagsStackCount = Math.max(skipTagsStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n        }\n      },\n\n      onComment: function (offset) {},\n      onDoctype: function (offset) {} // no need to process doctype nodes\n    });\n    // After we have found all matches, remove subsequent matches that\n    // overlap with a previous match. This can happen for instance with URLs,\n    // where the url 'google.com/#link' would match '#link' as a hashtag.\n    matches = this.compactMatches(matches);\n    // And finally, remove matches for match types that have been turned\n    // off. We needed to have all match types turned on initially so that\n    // things like hashtags could be filtered out if they were really just\n    // part of a URL match (for instance, as a named anchor).\n    matches = this.removeUnwantedMatches(matches);\n    return matches;\n  };\n  /**\n   * After we have found all matches, we need to remove matches that overlap\n   * with a previous match. This can happen for instance with URLs, where the\n   * url 'google.com/#link' would match '#link' as a hashtag. Because the\n   * '#link' part is contained in a larger match that comes before the HashTag\n   * match, we'll remove the HashTag match.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches\n   * @return {Autolinker.match.Match[]}\n   */\n  Autolinker.prototype.compactMatches = function (matches) {\n    // First, the matches need to be sorted in order of offset\n    matches.sort(function (a, b) {\n      return a.getOffset() - b.getOffset();\n    });\n    var i = 0;\n    while (i < matches.length - 1) {\n      var match = matches[i],\n        offset = match.getOffset(),\n        matchedTextLength = match.getMatchedText().length,\n        endIdx = offset + matchedTextLength;\n      if (i + 1 < matches.length) {\n        // Remove subsequent matches that equal offset with current match\n        if (matches[i + 1].getOffset() === offset) {\n          var removeIdx = matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n          matches.splice(removeIdx, 1);\n          continue;\n        }\n        // Remove subsequent matches that overlap with the current match\n        if (matches[i + 1].getOffset() < endIdx) {\n          matches.splice(i + 1, 1);\n          continue;\n        }\n      }\n      i++;\n    }\n    return matches;\n  };\n  /**\n   * Removes matches for matchers that were turned off in the options. For\n   * example, if {@link #hashtag hashtags} were not to be matched, we'll\n   * remove them from the `matches` array here.\n   *\n   * Note: we *must* use all Matchers on the input string, and then filter\n   * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n   * we wouldn't want to match the text '#link' as a HashTag inside of the text\n   * 'google.com/#link'. The way the algorithm works is that we match the full\n   * URL first (which prevents the accidental HashTag match), and then we'll\n   * simply throw away the URL match.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches The array of matches to remove\n   *   the unwanted matches from. Note: this array is mutated for the\n   *   removals.\n   * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n   */\n  Autolinker.prototype.removeUnwantedMatches = function (matches) {\n    if (!this.hashtag) remove(matches, function (match) {\n      return match.getType() === 'hashtag';\n    });\n    if (!this.email) remove(matches, function (match) {\n      return match.getType() === 'email';\n    });\n    if (!this.phone) remove(matches, function (match) {\n      return match.getType() === 'phone';\n    });\n    if (!this.mention) remove(matches, function (match) {\n      return match.getType() === 'mention';\n    });\n    if (!this.urls.schemeMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'scheme';\n      });\n    }\n    if (!this.urls.wwwMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'www';\n      });\n    }\n    if (!this.urls.tldMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'tld';\n      });\n    }\n    return matches;\n  };\n  /**\n   * Parses the input `text` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches.\n   *\n   * This method processes a **non-HTML string**, and is used to parse and\n   * match within the text nodes of an HTML string. This method is used\n   * internally by {@link #parse}.\n   *\n   * @private\n   * @param {String} text The text to find matches within (depending on if the\n   *   {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n   * @param {Number} [offset=0] The offset of the text node within the\n   *   original string. This is used when parsing with the {@link #parse}\n   *   method to generate correct offsets within the {@link Autolinker.match.Match}\n   *   instances, but may be omitted if calling this method publicly.\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `text`.\n   */\n  Autolinker.prototype.parseText = function (text, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    offset = offset || 0;\n    var matchers = this.getMatchers(),\n      matches = [];\n    for (var i = 0, numMatchers = matchers.length; i < numMatchers; i++) {\n      var textMatches = matchers[i].parseMatches(text);\n      // Correct the offset of each of the matches. They are originally\n      // the offset of the match within the provided text node, but we\n      // need to correct them to be relative to the original HTML input\n      // string (i.e. the one provided to #parse).\n      for (var j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++) {\n        textMatches[j].setOffset(offset + textMatches[j].getOffset());\n      }\n      matches.push.apply(matches, textMatches);\n    }\n    return matches;\n  };\n  /**\n   * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n   * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n   * URLs found within HTML tags.\n   *\n   * For instance, if given the text: `You should go to http://www.yahoo.com`,\n   * then the result will be `You should go to\n   * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   *\n   * This method finds the text around any HTML elements in the input\n   * `textOrHtml`, which will be the text that is processed. Any original HTML\n   * elements will be left as-is, as well as the text that is already wrapped\n   * in anchor (&lt;a&gt;) tags.\n   *\n   * @param {String} textOrHtml The HTML or text to autolink matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {String} The HTML, with matches automatically linked.\n   */\n  Autolinker.prototype.link = function (textOrHtml) {\n    if (!textOrHtml) {\n      return '';\n    } // handle `null` and `undefined` (for JavaScript users that don't have TypeScript support)\n    /* We would want to sanitize the start and end characters of a tag\n     * before processing the string in order to avoid an XSS scenario.\n     * This behaviour can be changed by toggling the sanitizeHtml option.\n     */\n    if (this.sanitizeHtml) {\n      textOrHtml = textOrHtml.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n    var matches = this.parse(textOrHtml),\n      newHtml = [],\n      lastIndex = 0;\n    for (var i = 0, len = matches.length; i < len; i++) {\n      var match = matches[i];\n      newHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n      newHtml.push(this.createMatchReturnVal(match));\n      lastIndex = match.getOffset() + match.getMatchedText().length;\n    }\n    newHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n    return newHtml.join('');\n  };\n  /**\n   * Creates the return string value for a given match in the input string.\n   *\n   * This method handles the {@link #replaceFn}, if one was provided.\n   *\n   * @private\n   * @param {Autolinker.match.Match} match The Match object that represents\n   *   the match.\n   * @return {String} The string that the `match` should be replaced with.\n   *   This is usually the anchor tag string, but may be the `matchStr` itself\n   *   if the match is not to be replaced.\n   */\n  Autolinker.prototype.createMatchReturnVal = function (match) {\n    // Handle a custom `replaceFn` being provided\n    var replaceFnResult;\n    if (this.replaceFn) {\n      replaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n    }\n\n    if (typeof replaceFnResult === 'string') {\n      return replaceFnResult; // `replaceFn` returned a string, use that\n    } else if (replaceFnResult === false) {\n      return match.getMatchedText(); // no replacement for the match\n    } else if (replaceFnResult instanceof HtmlTag) {\n      return replaceFnResult.toAnchorString();\n    } else {\n      // replaceFnResult === true, or no/unknown return value from function\n      // Perform Autolinker's default anchor tag generation\n      var anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n      return anchorTag.toAnchorString();\n    }\n  };\n  /**\n   * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n   * instances for this Autolinker instance.\n   *\n   * @private\n   * @return {Autolinker.matcher.Matcher[]}\n   */\n  Autolinker.prototype.getMatchers = function () {\n    if (!this.matchers) {\n      var tagBuilder = this.getTagBuilder();\n      var matchers = [new HashtagMatcher({\n        tagBuilder: tagBuilder,\n        serviceName: this.hashtag\n      }), new EmailMatcher({\n        tagBuilder: tagBuilder\n      }), new PhoneMatcher({\n        tagBuilder: tagBuilder\n      }), new MentionMatcher({\n        tagBuilder: tagBuilder,\n        serviceName: this.mention\n      }), new UrlMatcher({\n        tagBuilder: tagBuilder,\n        stripPrefix: this.stripPrefix,\n        stripTrailingSlash: this.stripTrailingSlash,\n        decodePercentEncoding: this.decodePercentEncoding\n      })];\n      return this.matchers = matchers;\n    } else {\n      return this.matchers;\n    }\n  };\n  /**\n   * Returns the {@link #tagBuilder} instance for this Autolinker instance,\n   * lazily instantiating it if it does not yet exist.\n   *\n   * @private\n   * @return {Autolinker.AnchorTagBuilder}\n   */\n  Autolinker.prototype.getTagBuilder = function () {\n    var tagBuilder = this.tagBuilder;\n    if (!tagBuilder) {\n      tagBuilder = this.tagBuilder = new AnchorTagBuilder({\n        newWindow: this.newWindow,\n        truncate: this.truncate,\n        className: this.className\n      });\n    }\n    return tagBuilder;\n  };\n  // NOTE: must be 'export default' here for UMD module\n  /**\n   * @static\n   * @property {String} version\n   *\n   * The Autolinker version number in the form major.minor.patch\n   *\n   * Ex: 3.15.0\n   */\n  Autolinker.version = version;\n  /**\n   * For backwards compatibility with Autolinker 1.x, the AnchorTagBuilder\n   * class is provided as a static on the Autolinker class.\n   */\n  Autolinker.AnchorTagBuilder = AnchorTagBuilder;\n  /**\n   * For backwards compatibility with Autolinker 1.x, the HtmlTag class is\n   * provided as a static on the Autolinker class.\n   */\n  Autolinker.HtmlTag = HtmlTag;\n  /**\n   * For backwards compatibility with Autolinker 1.x, the Matcher classes are\n   * provided as statics on the Autolinker class.\n   */\n  Autolinker.matcher = {\n    Email: EmailMatcher,\n    Hashtag: HashtagMatcher,\n    Matcher: Matcher,\n    Mention: MentionMatcher,\n    Phone: PhoneMatcher,\n    Url: UrlMatcher\n  };\n  /**\n   * For backwards compatibility with Autolinker 1.x, the Match classes are\n   * provided as statics on the Autolinker class.\n   */\n  Autolinker.match = {\n    Email: EmailMatch,\n    Hashtag: HashtagMatch,\n    Match: Match,\n    Mention: MentionMatch,\n    Phone: PhoneMatch,\n    Url: UrlMatch\n  };\n  return Autolinker;\n}();\nexport default Autolinker;","map":{"version":3,"mappings":"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","names":["version","defaults","remove","splitAndCapture","AnchorTagBuilder","Match","EmailMatch","HashtagMatch","MentionMatch","PhoneMatch","UrlMatch","Matcher","HtmlTag","EmailMatcher","UrlMatcher","HashtagMatcher","hashtagServices","PhoneMatcher","MentionMatcher","parseHtml","cfg","Autolinker","scheme","www","length","location","undefined","urls","normalizeUrlsCfg","email","phone","hashtag","mention","newWindow","stripPrefix","normalizeStripPrefixCfg","stripTrailingSlash","decodePercentEncoding","sanitizeHtml","indexOf","Error","truncate","normalizeTruncateCfg","className","replaceFn","context","textOrHtml","options","autolinker","link","parse","schemeMatches","wwwMatches","tldMatches","Number","POSITIVE_INFINITY","skipTagNames","skipTagsStackCount","matches","onOpenTag","tagName","onText","text","offset","htmlCharacterEntitiesRegex","textSplit","currentOffset_1","forEach","splitText","i","textNodeMatches","_this","parseText","push","apply","onCloseTag","Math","max","onComment","onDoctype","compactMatches","removeUnwantedMatches","sort","a","b","getOffset","match","matchedTextLength","getMatchedText","endIdx","removeIdx","splice","getType","m","getUrlMatchType","matchers","getMatchers","numMatchers","textMatches","parseMatches","j","numTextMatches","setOffset","replace","newHtml","lastIndex","len","substring","createMatchReturnVal","join","replaceFnResult","call","toAnchorString","anchorTag","buildTag","tagBuilder","getTagBuilder","serviceName","Email","Hashtag","Mention","Phone","Url"],"sources":["../../src/autolinker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}