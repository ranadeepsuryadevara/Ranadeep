{"ast":null,"code":"import { indexOf } from './utils';\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nvar HtmlTag = /** @class */function () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n   */\n  function HtmlTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * @cfg {String} tagName\n     *\n     * The tag name. Ex: 'a', 'button', etc.\n     *\n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n     * is executed.\n     */\n    this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Object.<String, String>} attrs\n     *\n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n     * values are the attribute values.\n     */\n    this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} innerHTML\n     *\n     * The inner HTML for the tag.\n     */\n    this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @protected\n     * @property {RegExp} whitespaceRegex\n     *\n     * Regular expression used to match whitespace in a string of CSS classes.\n     */\n    this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n    this.tagName = cfg.tagName || '';\n    this.attrs = cfg.attrs || {};\n    this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n  }\n  /**\n   * Sets the tag name that will be used to generate the tag with.\n   *\n   * @param {String} tagName\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setTagName = function (tagName) {\n    this.tagName = tagName;\n    return this;\n  };\n  /**\n   * Retrieves the tag name.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getTagName = function () {\n    return this.tagName || '';\n  };\n  /**\n   * Sets an attribute on the HtmlTag.\n   *\n   * @param {String} attrName The attribute name to set.\n   * @param {String} attrValue The attribute value to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n    var tagAttrs = this.getAttrs();\n    tagAttrs[attrName] = attrValue;\n    return this;\n  };\n  /**\n   * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n   *\n   * @param {String} attrName The attribute name to retrieve.\n   * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n   */\n  HtmlTag.prototype.getAttr = function (attrName) {\n    return this.getAttrs()[attrName];\n  };\n  /**\n   * Sets one or more attributes on the HtmlTag.\n   *\n   * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setAttrs = function (attrs) {\n    Object.assign(this.getAttrs(), attrs);\n    return this;\n  };\n  /**\n   * Retrieves the attributes Object (map) for the HtmlTag.\n   *\n   * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n   */\n  HtmlTag.prototype.getAttrs = function () {\n    return this.attrs || (this.attrs = {});\n  };\n  /**\n   * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setClass = function (cssClass) {\n    return this.setAttr('class', cssClass);\n  };\n  /**\n   * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to add.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.addClass = function (cssClass) {\n    var classAttr = this.getClass(),\n      whitespaceRegex = this.whitespaceRegex,\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n      newClasses = cssClass.split(whitespaceRegex),\n      newClass;\n    while (newClass = newClasses.shift()) {\n      if (indexOf(classes, newClass) === -1) {\n        classes.push(newClass);\n      }\n    }\n    this.getAttrs()['class'] = classes.join(' ');\n    return this;\n  };\n  /**\n   * Convenience method to remove one or more CSS classes from the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to remove.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.removeClass = function (cssClass) {\n    var classAttr = this.getClass(),\n      whitespaceRegex = this.whitespaceRegex,\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n      removeClasses = cssClass.split(whitespaceRegex),\n      removeClass;\n    while (classes.length && (removeClass = removeClasses.shift())) {\n      var idx = indexOf(classes, removeClass);\n      if (idx !== -1) {\n        classes.splice(idx, 1);\n      }\n    }\n    this.getAttrs()['class'] = classes.join(' ');\n    return this;\n  };\n  /**\n   * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n   * there are multiple.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getClass = function () {\n    return this.getAttrs()['class'] || '';\n  };\n  /**\n   * Convenience method to check if the tag has a CSS class or not.\n   *\n   * @param {String} cssClass The CSS class to check for.\n   * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n   */\n  HtmlTag.prototype.hasClass = function (cssClass) {\n    return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n  };\n  /**\n   * Sets the inner HTML for the tag.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setInnerHTML = function (html) {\n    this.innerHTML = html;\n    return this;\n  };\n  /**\n   * Backwards compatibility method name.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setInnerHtml = function (html) {\n    return this.setInnerHTML(html);\n  };\n  /**\n   * Retrieves the inner HTML for the tag.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getInnerHTML = function () {\n    return this.innerHTML || '';\n  };\n  /**\n   * Backward compatibility method name.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getInnerHtml = function () {\n    return this.getInnerHTML();\n  };\n  /**\n   * Override of superclass method used to generate the HTML string for the tag.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.toAnchorString = function () {\n    var tagName = this.getTagName(),\n      attrsStr = this.buildAttrsStr();\n    attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n    return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join('');\n  };\n  /**\n   * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n   * the stringified HtmlTag.\n   *\n   * @protected\n   * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n   */\n  HtmlTag.prototype.buildAttrsStr = function () {\n    if (!this.attrs) return ''; // no `attrs` Object (map) has been set, return empty string\n    var attrs = this.getAttrs(),\n      attrsArr = [];\n    for (var prop in attrs) {\n      if (attrs.hasOwnProperty(prop)) {\n        attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n      }\n    }\n    return attrsArr.join(' ');\n  };\n  return HtmlTag;\n}();\nexport { HtmlTag };","map":{"version":3,"mappings":"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","names":["indexOf","cfg","tagName","attrs","innerHTML","innerHtml","HtmlTag","attrName","attrValue","tagAttrs","getAttrs","Object","assign","cssClass","setAttr","classAttr","getClass","whitespaceRegex","classes","split","newClasses","newClass","shift","push","join","removeClasses","removeClass","length","idx","splice","html","setInnerHTML","getInnerHTML","getTagName","attrsStr","buildAttrsStr","getInnerHtml","attrsArr","prop","hasOwnProperty"],"sources":["../../src/html-tag.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}