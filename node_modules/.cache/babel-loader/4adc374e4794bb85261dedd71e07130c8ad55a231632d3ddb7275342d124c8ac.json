{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from './match';\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.Match\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nvar PhoneMatch = /** @class */function (_super) {\n  __extends(PhoneMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function PhoneMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @protected\n     * @property {String} number (required)\n     *\n     * The phone number that was matched, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     */\n    _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @protected\n     * @property  {Boolean} plusSign (required)\n     *\n     * `true` if the matched phone number started with a '+' sign. We'll include\n     * it in the `tel:` URL if so, as this is needed for international numbers.\n     *\n     * Ex: '+1 (123) 456 7879'\n     */\n    _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.number = cfg.number;\n    _this.plusSign = cfg.plusSign;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of PhoneMatch, returns 'phone'.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getType = function () {\n    return 'phone';\n  };\n  /**\n   * Returns the phone number that was matched as a string, without any\n   * delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getPhoneNumber = function () {\n    return this.number;\n  };\n  /**\n   * Alias of {@link #getPhoneNumber}, returns the phone number that was\n   * matched as a string, without any delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getNumber = function () {\n    return this.getPhoneNumber();\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getAnchorHref = function () {\n    return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getAnchorText = function () {\n    return this.matchedText;\n  };\n  return PhoneMatch;\n}(Match);\nexport { PhoneMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAqB,SAAS;AAE5C;;;;;;;;;;AAUA;EAAgCC;EAsB5B;;;;;EAKA,oBAAYC,GAAqB;IAAjC,YACIC,kBAAMD,GAAG,CAAC;IA3Bd;;;;;;;;IAQiBE,YAAM,GAAW,EAAE,CAAC,CAAC;IAEtC;;;;;;;;;IASiBA,cAAQ,GAAY,KAAK,CAAC,CAAC;IAUxCA,KAAI,CAACC,MAAM,GAAGH,GAAG,CAACG,MAAM;IACxBD,KAAI,CAACE,QAAQ,GAAGJ,GAAG,CAACI,QAAQ;;EAChC;EAEA;;;;;;EAMAC,4BAAO,GAAP;IACI,OAAO,OAAO;EAClB,CAAC;EAED;;;;;;;;EAQAA,mCAAc,GAAd;IACI,OAAO,IAAI,CAACF,MAAM;EACtB,CAAC;EAED;;;;;;;;EAQAE,8BAAS,GAAT;IACI,OAAO,IAAI,CAACC,cAAc,EAAE;EAChC,CAAC;EAED;;;;;EAKAD,kCAAa,GAAb;IACI,OAAO,MAAM,IAAI,IAAI,CAACD,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAACD,MAAM;EAC5D,CAAC;EAED;;;;;EAKAE,kCAAa,GAAb;IACI,OAAO,IAAI,CAACE,WAAW;EAC3B,CAAC;EACL,iBAAC;AAAD,CAAC,CArF+BT,KAAK","names":["Match","__extends","cfg","_super","_this","number","plusSign","PhoneMatch","getPhoneNumber","matchedText"],"sources":["../../../src/match/phone-match.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}