{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from './matcher';\nimport { alphaNumericAndMarksCharsStr } from '../regex-lib';\nimport { MentionMatch } from '../match/mention-match';\n// RegExp objects which are shared by all instances of MentionMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating MentionMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\nvar twitterRegex = new RegExp(\"@[_\".concat(alphaNumericAndMarksCharsStr, \"]{1,50}(?![_\").concat(alphaNumericAndMarksCharsStr, \"])\"), 'g'); // lookahead used to make sure we don't match something above 50 characters\nvar instagramRegex = new RegExp(\"@[_.\".concat(alphaNumericAndMarksCharsStr, \"]{1,30}(?![_\").concat(alphaNumericAndMarksCharsStr, \"])\"), 'g'); // lookahead used to make sure we don't match something above 30 characters\nvar soundcloudRegex = new RegExp(\"@[-_.\".concat(alphaNumericAndMarksCharsStr, \"]{1,50}(?![-_\").concat(alphaNumericAndMarksCharsStr, \"])\"), 'g'); // lookahead used to make sure we don't match something above 50 characters\n// TikTok usernames are 1-24 characters containing letters, numbers, underscores\n// and periods, but cannot end in a period: https://support.tiktok.com/en/getting-started/setting-up-your-profile/changing-your-username\nvar tiktokRegex = new RegExp(\"@[_.\".concat(alphaNumericAndMarksCharsStr, \"]{1,23}[_\").concat(alphaNumericAndMarksCharsStr, \"](?![_\").concat(alphaNumericAndMarksCharsStr, \"])\"), 'g'); // lookahead used to make sure we don't match something above 24 characters\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Mention\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find/replace username matches in an input string.\n */\nvar MentionMatcher = /** @class */function (_super) {\n  __extends(MentionMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n  function MentionMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n     *\n     * The name of service to link @mentions to.\n     *\n     * Valid values are: 'twitter', 'instagram', 'soundcloud', or 'tiktok'\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * Hash of regular expression to match username handles. Example match:\n     *\n     *     @asdf\n     *\n     * @private\n     * @property {Object} matcherRegexes\n     */\n    _this.matcherRegexes = {\n      twitter: twitterRegex,\n      instagram: instagramRegex,\n      soundcloud: soundcloudRegex,\n      tiktok: tiktokRegex\n    };\n    /**\n     * The regular expression to use to check the character before a username match to\n     * make sure we didn't accidentally match an email address.\n     *\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n     *\n     * @private\n     * @property {RegExp} nonWordCharRegex\n     */\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n  MentionMatcher.prototype.parseMatches = function (text) {\n    var serviceName = this.serviceName,\n      matcherRegex = this.matcherRegexes[this.serviceName],\n      nonWordCharRegex = this.nonWordCharRegex,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    if (!matcherRegex) {\n      return matches;\n    }\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n        prevChar = text.charAt(offset - 1);\n      // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not an email\n      // address), then it is a username match.\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0].replace(/\\.+$/g, ''),\n          // strip off trailing .\n          mention = matchedText.slice(1); // strip off the '@' character at the beginning\n        matches.push(new MentionMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          mention: mention\n        }));\n      }\n    }\n    return matches;\n  };\n  return MentionMatcher;\n}(Matcher);\nexport { MentionMatcher };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAuB,WAAW;AAClD,SAASC,4BAA4B,QAAQ,cAAc;AAE3D,SAASC,YAAY,QAAQ,wBAAwB;AAGrD;AACA;AACA;AACA;AACA;AAEA,IAAMC,YAAY,GAAG,IAAIC,MAAM,CAC3B,aAAMH,4BAA4B,yBAAeA,4BAA4B,OAAI,EACjF,GAAG,CACN,CAAC,CAAC;AAEH,IAAMI,cAAc,GAAG,IAAID,MAAM,CAC7B,cAAOH,4BAA4B,yBAAeA,4BAA4B,OAAI,EAClF,GAAG,CACN,CAAC,CAAC;AAEH,IAAMK,eAAe,GAAG,IAAIF,MAAM,CAC9B,eAAQH,4BAA4B,0BAAgBA,4BAA4B,OAAI,EACpF,GAAG,CACN,CAAC,CAAC;AAEH;AACA;AACA,IAAMM,WAAW,GAAG,IAAIH,MAAM,CAC1B,cAAOH,4BAA4B,sBAAYA,4BAA4B,mBAASA,4BAA4B,OAAI,EACpH,GAAG,CACN,CAAC,CAAC;AAEH,IAAMO,gBAAgB,GAAG,IAAIJ,MAAM,CAAC,IAAI,GAAGH,4BAA4B,GAAG,GAAG,CAAC;AAE9E;;;;;;AAMA;EAAoCQ;EAoChC;;;;;EAKA,wBAAYC,GAAyB;IAArC,YACIC,kBAAMD,GAAG,CAAC;IAzCd;;;;;;;IAOUE,iBAAW,GAAoB,SAAS,CAAC,CAAC;IAEpD;;;;;;;;IAQmBA,oBAAc,GAA8B;MAC3DC,OAAO,EAAEV,YAAY;MACrBW,SAAS,EAAET,cAAc;MACzBU,UAAU,EAAET,eAAe;MAC3BU,MAAM,EAAET;KACX;IAED;;;;;;;;;IASmBK,sBAAgB,GAAGJ,gBAAgB;IAUlDI,KAAI,CAACK,WAAW,GAAGP,GAAG,CAACO,WAAW;;EACtC;EAEA;;;EAGAC,qCAAY,GAAZ,UAAaC,IAAY;IACrB,IAAIF,WAAW,GAAG,IAAI,CAACA,WAAW;MAC9BG,YAAY,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC;MACpDT,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;MACxCc,UAAU,GAAG,IAAI,CAACA,UAAU;MAC5BC,OAAO,GAAY,EAAE;MACrBC,KAA6B;IAEjC,IAAI,CAACJ,YAAY,EAAE;MACf,OAAOG,OAAO;;IAGlB,OAAO,CAACC,KAAK,GAAGJ,YAAY,CAACK,IAAI,CAACN,IAAI,CAAC,MAAM,IAAI,EAAE;MAC/C,IAAIO,MAAM,GAAGF,KAAK,CAACG,KAAK;QACpBC,QAAQ,GAAGT,IAAI,CAACU,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC;MAEtC;MACA;MACA;MACA,IAAIA,MAAM,KAAK,CAAC,IAAIlB,gBAAgB,CAACsB,IAAI,CAACF,QAAQ,CAAC,EAAE;QACjD,IAAIG,WAAW,GAAGP,KAAK,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;UAAE;UAC7CC,OAAO,GAAGF,WAAW,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpCX,OAAO,CAACY,IAAI,CACR,IAAIjC,YAAY,CAAC;UACboB,UAAU,EAAEA,UAAU;UACtBS,WAAW,EAAEA,WAAW;UACxBL,MAAM,EAAEA,MAAM;UACdT,WAAW,EAAEA,WAAW;UACxBgB,OAAO,EAAEA;SACZ,CAAC,CACL;;;IAIT,OAAOV,OAAO;EAClB,CAAC;EACL,qBAAC;AAAD,CAAC,CAvFmCvB,OAAO","names":["Matcher","alphaNumericAndMarksCharsStr","MentionMatch","twitterRegex","RegExp","instagramRegex","soundcloudRegex","tiktokRegex","nonWordCharRegex","__extends","cfg","_super","_this","twitter","instagram","soundcloud","tiktok","serviceName","MentionMatcher","text","matcherRegex","matcherRegexes","tagBuilder","matches","match","exec","offset","index","prevChar","charAt","test","matchedText","replace","mention","slice","push"],"sources":["../../../src/matcher/mention-matcher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}