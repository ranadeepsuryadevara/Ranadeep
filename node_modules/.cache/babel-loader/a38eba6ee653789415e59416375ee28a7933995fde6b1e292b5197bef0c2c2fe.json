{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from './matcher';\nimport { PhoneMatch } from '../match/phone-match';\nimport { nonDigitRe } from '../regex-lib';\n// RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\nvar mostPhoneNumbers = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/;\n// Regex for Japanese phone numbers\nvar japanesePhoneRe = /(0([1-9]{1}-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/;\n// Combined regex\nvar phoneMatcherRegex = new RegExp(\"\".concat(mostPhoneNumbers.source, \"|\").concat(japanesePhoneRe.source), 'g');\n/**\n * @class Autolinker.matcher.Phone\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find Phone number matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n * details.\n */\nvar PhoneMatcher = /** @class */function (_super) {\n  __extends(PhoneMatcher, _super);\n  function PhoneMatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * The regular expression to match Phone numbers. Example matches:\n     *\n     *     (123) 456-7890\n     *     123 456 7890\n     *     123-456-7890\n     *     +18004441234,,;,10226420346#\n     *     +1 (800) 444 1234\n     *     10226420346#\n     *     1-800-444-1234,1022,64,20346#\n     *\n     * This regular expression has the following capturing groups:\n     *\n     * 1 or 2. The prefixed '+' sign, if there is one.\n     *\n     * @protected\n     * @property {RegExp} matcherRegex\n     */\n    _this.matcherRegex = phoneMatcherRegex;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n  PhoneMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    while ((match = matcherRegex.exec(text)) !== null) {\n      // Remove non-numeric values from phone number string\n      var matchedText = match[0],\n        cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n        // strip out non-digit characters exclude comma semicolon and #\n        plusSign = !!(match[1] || match[2]),\n        // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n        before = match.index == 0 ? '' : text.substr(match.index - 1, 1),\n        after = text.substr(match.index + matchedText.length, 1),\n        contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n      if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n        matches.push(new PhoneMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: match.index,\n          number: cleanNumber,\n          plusSign: plusSign\n        }));\n      }\n    }\n    return matches;\n  };\n  PhoneMatcher.prototype.testMatch = function (text) {\n    return nonDigitRe.test(text);\n  };\n  return PhoneMatcher;\n}(Matcher);\nexport { PhoneMatcher };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAQ,WAAW;AACnC,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,UAAU,QAAQ,cAAc;AAEzC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,IAAMC,gBAAgB,GAClB,sRAAsR;AAE1R;AACA,IAAMC,eAAe,GACjB,oIAAoI;AAExI;AACA,IAAMC,iBAAiB,GAAG,IAAIC,MAAM,CAAC,UAAGH,gBAAgB,CAACI,MAAM,cAAIH,eAAe,CAACG,MAAM,CAAE,EAAE,GAAG,CAAC;AAEjG;;;;;;;;;AASA;EAAkCC;EAAlC;IAAA;IACI;;;;;;;;;;;;;;;;;;IAkBUC,kBAAY,GAAGJ,iBAAiB;;EAuC9C;EArCI;;;EAGAK,mCAAY,GAAZ,UAAaC,IAAY;IACrB,IAAIC,YAAY,GAAG,IAAI,CAACA,YAAY;MAChCC,UAAU,GAAG,IAAI,CAACA,UAAU;MAC5BC,OAAO,GAAY,EAAE;MACrBC,KAA6B;IAEjC,OAAO,CAACA,KAAK,GAAGH,YAAY,CAACI,IAAI,CAACL,IAAI,CAAC,MAAM,IAAI,EAAE;MAC/C;MACA,IAAIM,WAAW,GAAGF,KAAK,CAAC,CAAC,CAAC;QACtBG,WAAW,GAAGD,WAAW,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;QAAE;QACrDC,QAAQ,GAAG,CAAC,EAAEL,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC;QAAE;QACrCM,MAAM,GAAGN,KAAK,CAACO,KAAK,IAAI,CAAC,GAAG,EAAE,GAAGX,IAAI,CAACY,MAAM,CAACR,KAAK,CAACO,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;QAChEE,KAAK,GAAGb,IAAI,CAACY,MAAM,CAACR,KAAK,CAACO,KAAK,GAAGL,WAAW,CAACQ,MAAM,EAAE,CAAC,CAAC;QACxDC,YAAY,GAAG,CAACL,MAAM,CAACN,KAAK,CAAC,IAAI,CAAC,IAAI,CAACS,KAAK,CAACT,KAAK,CAAC,IAAI,CAAC;MAE5D,IAAI,IAAI,CAACY,SAAS,CAACZ,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAACY,SAAS,CAACV,WAAW,CAAC,IAAIS,YAAY,EAAE;QACzEZ,OAAO,CAACc,IAAI,CACR,IAAI3B,UAAU,CAAC;UACXY,UAAU,EAAEA,UAAU;UACtBI,WAAW,EAAEA,WAAW;UACxBY,MAAM,EAAEd,KAAK,CAACO,KAAK;UACnBQ,MAAM,EAAEZ,WAAW;UACnBE,QAAQ,EAAEA;SACb,CAAC,CACL;;;IAIT,OAAON,OAAO;EAClB,CAAC;EAESJ,gCAAS,GAAnB,UAAoBC,IAAY;IAC5B,OAAOT,UAAU,CAAC6B,IAAI,CAACpB,IAAI,CAAC;EAChC,CAAC;EACL,mBAAC;AAAD,CAAC,CA1DiCX,OAAO","names":["Matcher","PhoneMatch","nonDigitRe","mostPhoneNumbers","japanesePhoneRe","phoneMatcherRegex","RegExp","source","__extends","_this","PhoneMatcher","text","matcherRegex","tagBuilder","matches","match","exec","matchedText","cleanNumber","replace","plusSign","before","index","substr","after","length","contextClear","testMatch","push","offset","number","test"],"sources":["../../../src/matcher/phone-matcher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}