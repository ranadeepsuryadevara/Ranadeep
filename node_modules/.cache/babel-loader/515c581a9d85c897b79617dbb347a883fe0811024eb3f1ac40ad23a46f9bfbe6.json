{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs3/helpers/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime-corejs3/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs3/regenerator\";\n// The subtree resolver is a higher-level interface that allows you to\n// get the same result that you would from `Swagger.resolve`, but focuses on\n// a subtree of your object.\n//\n// It makes several assumptions that allow you to think less about what resolve,\n// specmap, and normalizeSwagger are doing: if this is not suitable for you,\n// you can emulate `resolveSubtree`'s behavior by talking to the traditional\n// resolver directly.\n//\n// By providing a top-level `obj` and a `path` to resolve within, the subtree\n// at `path` will be resolved and normalized in the context of your top-level\n// `obj`. You'll get the resolved subtree you're interest in as a return value\n// (or, you can use `returnEntireTree` to get everything back).\n//\n// This is useful for cases where resolving your entire object is unnecessary\n// and/or non-performant; we use this interface for lazily resolving operations\n// and models in Swagger-UI, which allows us to handle larger definitions.\n//\n// It's likely that Swagger-Client will rely entirely on lazy resolving in\n// future versions.\n//\n// TODO: move the remarks above into project documentation\nimport get from 'lodash/get';\nimport resolve from '../resolver.js';\nimport { normalizeSwagger } from '../helpers/index.js';\nexport default function resolveSubtree(_x, _x2) {\n  return _resolveSubtree.apply(this, arguments);\n}\nfunction _resolveSubtree() {\n  _resolveSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj, path) {\n    var opts,\n      returnEntireTree,\n      baseDoc,\n      requestInterceptor,\n      responseInterceptor,\n      parameterMacro,\n      modelPropertyMacro,\n      useCircularStructures,\n      resolveOptions,\n      _normalizeSwagger,\n      normalized,\n      result,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            returnEntireTree = opts.returnEntireTree, baseDoc = opts.baseDoc, requestInterceptor = opts.requestInterceptor, responseInterceptor = opts.responseInterceptor, parameterMacro = opts.parameterMacro, modelPropertyMacro = opts.modelPropertyMacro, useCircularStructures = opts.useCircularStructures;\n            resolveOptions = {\n              pathDiscriminator: path,\n              baseDoc: baseDoc,\n              requestInterceptor: requestInterceptor,\n              responseInterceptor: responseInterceptor,\n              parameterMacro: parameterMacro,\n              modelPropertyMacro: modelPropertyMacro,\n              useCircularStructures: useCircularStructures\n            };\n            _normalizeSwagger = normalizeSwagger({\n              spec: obj\n            }), normalized = _normalizeSwagger.spec;\n            _context.next = 6;\n            return resolve(_objectSpread(_objectSpread({}, resolveOptions), {}, {\n              spec: normalized,\n              allowMetaPatches: true,\n              skipNormalization: true\n            }));\n          case 6:\n            result = _context.sent;\n            if (!returnEntireTree && Array.isArray(path) && path.length) {\n              result.spec = get(result.spec, path) || null;\n            }\n            return _context.abrupt(\"return\", result);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveSubtree.apply(this, arguments);\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_regeneratorRuntime","get","resolve","normalizeSwagger","resolveSubtree","_x","_x2","_resolveSubtree","apply","arguments","mark","_callee","obj","path","opts","returnEntireTree","baseDoc","requestInterceptor","responseInterceptor","parameterMacro","modelPropertyMacro","useCircularStructures","resolveOptions","_normalizeSwagger","normalized","result","_args","wrap","_callee$","_context","prev","next","length","undefined","pathDiscriminator","spec","allowMetaPatches","skipNormalization","sent","Array","isArray","abrupt","stop"],"sources":["C:/Users/JRS GROUPS/Desktop/React/ftask/node_modules/swagger-client/es/subtree-resolver/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime-corejs3/helpers/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime-corejs3/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs3/regenerator\";\n// The subtree resolver is a higher-level interface that allows you to\n// get the same result that you would from `Swagger.resolve`, but focuses on\n// a subtree of your object.\n//\n// It makes several assumptions that allow you to think less about what resolve,\n// specmap, and normalizeSwagger are doing: if this is not suitable for you,\n// you can emulate `resolveSubtree`'s behavior by talking to the traditional\n// resolver directly.\n//\n// By providing a top-level `obj` and a `path` to resolve within, the subtree\n// at `path` will be resolved and normalized in the context of your top-level\n// `obj`. You'll get the resolved subtree you're interest in as a return value\n// (or, you can use `returnEntireTree` to get everything back).\n//\n// This is useful for cases where resolving your entire object is unnecessary\n// and/or non-performant; we use this interface for lazily resolving operations\n// and models in Swagger-UI, which allows us to handle larger definitions.\n//\n// It's likely that Swagger-Client will rely entirely on lazy resolving in\n// future versions.\n//\n// TODO: move the remarks above into project documentation\nimport get from 'lodash/get';\nimport resolve from '../resolver.js';\nimport { normalizeSwagger } from '../helpers/index.js';\nexport default function resolveSubtree(_x, _x2) {\n  return _resolveSubtree.apply(this, arguments);\n}\n\nfunction _resolveSubtree() {\n  _resolveSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj, path) {\n    var opts,\n        returnEntireTree,\n        baseDoc,\n        requestInterceptor,\n        responseInterceptor,\n        parameterMacro,\n        modelPropertyMacro,\n        useCircularStructures,\n        resolveOptions,\n        _normalizeSwagger,\n        normalized,\n        result,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            returnEntireTree = opts.returnEntireTree, baseDoc = opts.baseDoc, requestInterceptor = opts.requestInterceptor, responseInterceptor = opts.responseInterceptor, parameterMacro = opts.parameterMacro, modelPropertyMacro = opts.modelPropertyMacro, useCircularStructures = opts.useCircularStructures;\n            resolveOptions = {\n              pathDiscriminator: path,\n              baseDoc: baseDoc,\n              requestInterceptor: requestInterceptor,\n              responseInterceptor: responseInterceptor,\n              parameterMacro: parameterMacro,\n              modelPropertyMacro: modelPropertyMacro,\n              useCircularStructures: useCircularStructures\n            };\n            _normalizeSwagger = normalizeSwagger({\n              spec: obj\n            }), normalized = _normalizeSwagger.spec;\n            _context.next = 6;\n            return resolve(_objectSpread(_objectSpread({}, resolveOptions), {}, {\n              spec: normalized,\n              allowMetaPatches: true,\n              skipNormalization: true\n            }));\n\n          case 6:\n            result = _context.sent;\n\n            if (!returnEntireTree && Array.isArray(path) && path.length) {\n              result.spec = get(result.spec, path) || null;\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveSubtree.apply(this, arguments);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}