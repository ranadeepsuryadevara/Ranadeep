{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from './match';\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.Match\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nvar MentionMatch = /** @class */function (_super) {\n  __extends(MentionMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function MentionMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point mention matches to. See {@link Autolinker#mention}\n     * for available values.\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} mention (required)\n     *\n     * The Mention that was matched, without the '@' character.\n     */\n    _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.mention = cfg.mention;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of MentionMatch, returns 'mention'.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getType = function () {\n    return 'mention';\n  };\n  /**\n   * Returns the mention, without the '@' character.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getMention = function () {\n    return this.mention;\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the mention to.\n   * Ex: 'instagram', 'twitter', 'soundcloud'.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getAnchorHref = function () {\n    switch (this.serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/' + this.mention;\n      case 'instagram':\n        return 'https://instagram.com/' + this.mention;\n      case 'soundcloud':\n        return 'https://soundcloud.com/' + this.mention;\n      case 'tiktok':\n        return 'https://www.tiktok.com/@' + this.mention;\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getAnchorText = function () {\n    return '@' + this.mention;\n  };\n  /**\n   * Returns the CSS class suffixes that should be used on a tag built with\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n   * details.\n   *\n   * @return {String[]}\n   */\n  MentionMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n      serviceName = this.getServiceName();\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n    return cssClassSuffixes;\n  };\n  return MentionMatch;\n}(Match);\nexport { MentionMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAqB,SAAS;AAG5C;;;;;;;;AAQA;EAAkCC;EAgB9B;;;;;EAKA,sBAAYC,GAAuB;IAAnC,YACIC,kBAAMD,GAAG,CAAC;IArBd;;;;;;IAMiBE,iBAAW,GAAoB,SAAS,CAAC,CAAC;IAE3D;;;;;IAKiBA,aAAO,GAAW,EAAE,CAAC,CAAC;IAUnCA,KAAI,CAACC,OAAO,GAAGH,GAAG,CAACG,OAAO;IAC1BD,KAAI,CAACE,WAAW,GAAGJ,GAAG,CAACI,WAAW;;EACtC;EAEA;;;;;;EAMAC,8BAAO,GAAP;IACI,OAAO,SAAS;EACpB,CAAC;EAED;;;;;EAKAA,iCAAU,GAAV;IACI,OAAO,IAAI,CAACF,OAAO;EACvB,CAAC;EAED;;;;;;EAMAE,qCAAc,GAAd;IACI,OAAO,IAAI,CAACD,WAAW;EAC3B,CAAC;EAED;;;;;EAKAC,oCAAa,GAAb;IACI,QAAQ,IAAI,CAACD,WAAW;MACpB,KAAK,SAAS;QACV,OAAO,sBAAsB,GAAG,IAAI,CAACD,OAAO;MAChD,KAAK,WAAW;QACZ,OAAO,wBAAwB,GAAG,IAAI,CAACA,OAAO;MAClD,KAAK,YAAY;QACb,OAAO,yBAAyB,GAAG,IAAI,CAACA,OAAO;MACnD,KAAK,QAAQ;QACT,OAAO,0BAA0B,GAAG,IAAI,CAACA,OAAO;MAEpD;QACI;QACA,MAAM,IAAIG,KAAK,CAAC,4CAA4C,GAAG,IAAI,CAACF,WAAW,CAAC;IAAC;EAE7F,CAAC;EAED;;;;;EAKAC,oCAAa,GAAb;IACI,OAAO,GAAG,GAAG,IAAI,CAACF,OAAO;EAC7B,CAAC;EAED;;;;;;;EAOAE,0CAAmB,GAAnB;IACI,IAAIE,gBAAgB,GAAGN,iBAAMO,mBAAmB,WAAE;MAC9CJ,WAAW,GAAG,IAAI,CAACK,cAAc,EAAE;IAEvC,IAAIL,WAAW,EAAE;MACbG,gBAAgB,CAACG,IAAI,CAACN,WAAW,CAAC;;IAEtC,OAAOG,gBAAgB;EAC3B,CAAC;EACL,mBAAC;AAAD,CAAC,CAxGiCT,KAAK","names":["Match","__extends","cfg","_super","_this","mention","serviceName","MentionMatch","Error","cssClassSuffixes","getCssClassSuffixes","getServiceName","push"],"sources":["../../../src/match/mention-match.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}